ofxVolumetrics - render volumetric data on the GPU using GLSL and openFrameworks

 Written by Timothy Scaffidi (http://timothyscaffidi.com)
 Volumetric rendering algorithm adapted from Peter Trier (http://www.daimi.au.dk/~trier/?page_id=98)

 Usage:
    copy or make symbolic links to the shaders in your app's bin/data/shaders folder.

    setup:
        void setup(int w, int h, int d, ofVec3f voxelSize);
        voxelSize is the size of each voxel, W:H:D, used for streching the volume, think pixel aspect ratio in video.
        If there is a data set that looks squashed with 1:1:1, try 1:1:2.

    load with data:
        create a voxel buffer unsigned char array. This must be RGBA! rendering voxels without an alpha channel defeats the point.

        void updateVolumeData(unsigned char * data, int w, int h, int d, int xOffset, int yOffset, int zOffset);

        you may upload the entire volume at once, or sub-portions of the volume using the x y and z offset amounts amd chaning the size of upload.
        Note that moving data from system memory to GFX memory is quite slow!
        Updating the entire volume every frame will be very slow, only update what has changed if you want to do animation.

    render:
        perform any tranformations as per usual
        void drawVolume(float x, float y, float z, float size, int zTexOffset);
        zTexOffset is used to slide the texture coordinates around on the z axis, which may be useful for animation if by uploading one slice at a time
